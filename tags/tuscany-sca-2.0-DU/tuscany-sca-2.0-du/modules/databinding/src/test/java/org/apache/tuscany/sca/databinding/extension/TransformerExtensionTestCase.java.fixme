/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.    
 */

package org.apache.tuscany.sca.databinding.extension;

import javax.xml.stream.XMLStreamReader;

import junit.framework.TestCase;

import org.apache.tuscany.sca.databinding.Transformer;
import org.apache.tuscany.sca.databinding.TransformerExtensionPoint;
import org.apache.tuscany.sca.databinding.impl.BaseTransformer;
import org.easymock.EasyMock;
import org.w3c.dom.Node;

/**
 * Test case for TransformerExtension
 *
 * @version $Rev: 704156 $ $Date: 2008-10-13 17:31:59 +0100 (Mon, 13 Oct 2008) $
 */
public class TransformerExtensionTestCase extends TestCase {

    /**
     * @see junit.framework.TestCase#setUp()
     */
    @Override
    protected void setUp() throws Exception {
        super.setUp();
    }

    public void testExtension() {
        MyTransformer transformer = new MyTransformer();
        assertEquals(Node.class.getName(), transformer.getSourceDataBinding());
        assertEquals(XMLStreamReader.class.getName(), transformer.getTargetDataBinding());
        assertEquals(50, transformer.getWeight());
        TransformerExtensionPoint registry = EasyMock.createMock(TransformerExtensionPoint.class);
        registry.addTransformer(EasyMock.isA(Transformer.class), EasyMock.eq(true));
        EasyMock
                .expect(registry.getTransformer(transformer.getSourceDataBinding(), transformer.getTargetDataBinding()))
                .andReturn(transformer);
        EasyMock.replay(registry);
        registry.addTransformer(transformer, true);
        assertSame(transformer, registry.getTransformer(transformer.getSourceDataBinding(), transformer
                .getTargetDataBinding()));
    }

    private static class MyTransformer extends BaseTransformer<Node, XMLStreamReader> {

        @Override
        protected Class<Node> getSourceType() {
            return Node.class;
        }

        @Override
        protected Class<XMLStreamReader> getTargetType() {
            return XMLStreamReader.class;
        }

    }

}
