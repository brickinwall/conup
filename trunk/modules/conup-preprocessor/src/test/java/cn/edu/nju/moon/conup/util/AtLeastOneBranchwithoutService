package cn.edu.nju.moon.conup.sample.portal.services;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.Map.Entry;

import org.oasisopen.sca.annotation.Reference;
import org.oasisopen.sca.annotation.Service;

import cn.edu.nju.moon.conup.def.VcTransaction;
import cn.edu.nju.moon.conup.ext.ddm.LocalDynamicDependencesManager;
import cn.edu.nju.moon.conup.listener.ComponentListener;
import cn.edu.nju.moon.conup.listener.ComponentListenerImpl;
import cn.edu.nju.moon.conup.spi.datamodel.ConupTransaction;

@Service(PortalService.class)
public class PortalServiceImpl implements PortalService {
	private TokenService tokenService;
	private ProcService procService;

	public TokenService getTokenService() {
		return tokenService;
	}
	@Reference
	public void setTokenService(TokenService tokenService) {
		this.tokenService = tokenService;
	}

	public ProcService getProcService() {
		return procService;
	}
	@Reference
	public void setProcService(ProcService procService) {
		this.procService = procService;
	}

	public String getToken(String cred) {
		return tokenService.getToken(cred);
	}
	
	@Override
	@ConupTransaction
	public List<String> execute(String userName, String passwd) {
		LOGGER.fine("enter execute.......\n\n");
		String cred = userName + "," + passwd;
		int i = 1;
		switch (i) {
		case 0:

			break;
		case 1:
			tokenService.getToken(cred);
			break;
		case 2:

			break;
		case 3:
			tokenService.getToken(cred);
			break;
		case 4:
			tokenService.getToken(cred);
			break;
		default:

		}

		String token = tokenService.getToken(cred);
 
		String data ="";
		List<String> result = procService.process(token, data);

		return result;

	}
	@ConupTransaction
	public void ifTest(String userName, String passwd) {
		String cred = userName + "," + passwd;
		String data ="";
		String token = "aa";
		int i = 1;		
		if (i > 1) {
			tokenService.getToken(cred);
			while (i < 10) {
				i++;			
				procService.process(token, data);
			}
		} 	
		tokenService.getToken(cred);
	}
}
